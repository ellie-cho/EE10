MODULE      CUnit
TITLE      'Caltech10 CUnit'


" Description:  This is a template file for implementing the Caltech10 CUnit.
"               It is the top-level module which will instantiate and connect
"               all other modules.
"
" Inputs:         ProgramDB[15..0]  - the 16-bit program data bus
"                 Reset             - system reset signal
"                 Clock             - system clock
"
" I/O:            DataDB[7..0]      - the 8-bit data data bus
"
" Outputs:        ProgramAB[12..0]  - the 13-bit program address bus
"                 DataAB[7..0]      - the 8-bit data address bus
"                 RD                - read signal for the data data bus
"                 WR                - write signal for the data data bus
"                 IO                - memory (0) or I/O (1) is being accessed
"
" Status Outputs: Accum[7..0]       - the 8-bit accumulator
"                 Flags[7..0]       - the 8-bit flag register
"                 XReg[7..0]        - the 8-bit X register
"                 SReg[7..0]        - the 8-bit S register


" Revision History:
" 02/15/18   Glen George  Initial Revision
" 3/27/20	 Ellie Cho	  Finished CUnit


" Pin/Signal Declarations

" Inputs

ProgramDB15..ProgramDB0	pin;	"input  16-bit instruction data bus
Reset           	pin;	"input  system reset signal
Clock           	pin;	"input  system clock


" I/O

DataDB7..DataDB0	pin;	"I/O  8-bit Data data bus


" Outputs

ProgramAB12..ProgramAB0	pin;	"output  the 13-bit Program address bus
DataAB7..DataAB0	pin;	"output  the 8-bit Data address bus
RD			pin;	"output  read signal for the Data data bus
WR			pin;	"output  write signal for the Data data bus



" Status Outputs

Accum7..Accum0		pin;	"the accumulator
Flags7..Flags0		pin;	"the flags
XReg7..XReg0		pin;	"the X register
SReg7..SReg0		pin;	"the S register


" declare the used modules

ControlUnit INTERFACE   (IR15..IR0, Flags7..Flags0, Reset, Clock 
            -> Data7..Data0,
           Direct12..Direct0, ALU_EnCVFlags, ALU_EnSZFlags,
            ALU_FControl3..ALU_FControl0, 
            ALU_Subtract, 
            ALU_UseCarry, ALU_Popf, ALU_InvertAdderCarry, ALU_ZeroAdder, 
            ALU_EnableAccumWrite, 
            ALU_FlagMod1..ALU_FlagMod0,
            PAU_MuxSel2..PAU_MuxSel0, PAU_Increment,
            PAU_LoadHigh, PAU_LoadLow,
            DAU_Decrement, 
            DAU_AddressMuxSel1..DAU_AddressMuxSel0, DAU_CarryIn, 
            DAU_WriteBackSel, DAU_Post, DAU_OffsetSel, 
            DAU_Load, DataDBSel1..DataDBSel0,
           PAUOffsetSel,
           ALUDSel1..ALUDSel0, RD, WR);


DataAccess	INTERFACE  (Accum7..Accum0, Offset7..Offset0,
                       AccumMuxSel1..AccumMuxSel0, Decrement, CarryIn,
                       WriteBackSel, Post, OffsetSel, Load,
                       Reset, Clock
                       -> DataAddr7..DataAddr0, XReg7..XReg0, SReg7..SReg0);


ALU INTERFACE  (Data7..Data0,              " ALU Data input
            EnCVFlags,                 " Enable setting C, V Flags when high
            EnSZFlags,                 " Enable setting S, Z Flags when high
            FControl3..FControl0,      " F-Block Truth Table Controls
            						   " is an ALU OP
            ZeroAdder,                 " High zeroes A-input of adder,
            						   " is an ALU Op (switch)
   
            Subtract,	
            UseCarry,
            Popf,					   " High for the POPF instruction
            InvertAdderCarry,          " High only to invert CarryOut of adder
            						   " before storing it to the carry flag
            EnableAccumWrite,          " High to write to the accumulator
            FlagMod1..FlagMod0,        " Control inputs for flag modification
            Reset, Clock
            -> Accum7..Accum0, 
            Flags7..Flags0);        " ALU Flags output

ProgramAccess 	INTERFACE  (Offset7..Offset0, Direct12..Direct0, 
		    LoadHigh,
		    LoadLow,
			MuxSel2..MuxSel0,
            Increment,
            Reset, 
            Clock
            -> 
            ProgAddr12..ProgAddr0  );

" create instances of the modules

ALUnit      FUNCTIONAL_BLOCK    ALU;
PAUnit      FUNCTIONAL_BLOCK    ProgramAccess;
DAUnit      FUNCTIONAL_BLOCK    DataAccess;
CUnit       FUNCTIONAL_BLOCK    ControlUnit;

" Busses

ProgramAB  =  [ProgramAB12..ProgramAB0];"Program address bus
ProgramDB  =  [ProgramDB15..ProgramDB0];"Program data bus
DataAB     =  [DataAB7..DataAB0];	"Data address bus
DataDB     =  [DataDB7..DataDB0];	"Data data bus

" ==========
" Constants:
" ==========
DATADB      = [0, 0];
EIGHTBITIR  = [1, 1];
XREG        = [0, 1];
SREG        = [1, 0];

" Constants for Data Bus Mux:
ACCUM       = [0, 0];
FLAGS       = [0, 1];
LOWER       = [1, 0];
UPPER       = [1, 1];

EQUATIONS

DataDB  =(!CUnit.DataDBSel1 & !CUnit.DataDBSel0 & ALUnit.[Accum7..Accum0])
        #(!CUnit.DataDBSel1 &  CUnit.DataDBSel0 & ALUnit.[Flags7..Flags0])
        #( CUnit.DataDBSel1 & !CUnit.DataDBSel0 & PAUnit.[ProgAddr7..ProgAddr0])
        #( CUnit.DataDBSel1 &  CUnit.DataDBSel0 & PAUnit.[0, 0, 0, ProgAddr12..ProgAddr8]);

" ALU Data Mux Calculation:
ALUnit.[Data7..Data0] =
         (! CUnit.ALUDSel1 & ! CUnit.ALUDSel0 & DataDB)
       # (! CUnit.ALUDSel1 &   CUnit.ALUDSel0 & CUnit.[Data7..Data0])
       # (  CUnit.ALUDSel1 & ! CUnit.ALUDSel0 & DAUnit.[SReg7..SReg0])
       # (  CUnit.ALUDSel1 &   CUnit.ALUDSel0 & DAUnit.[XReg7..XReg0]);

RD = CUnit.RD;
DataDB.OE = WR;		"data data bus is enabled when writing


" ============
" ALU LINKING:
" ============

ALUnit.Reset = Reset;
ALUnit.Clock = Clock;
ALUnit.EnCVFlags = CUnit.ALU_EnCVFlags;
ALUnit.EnSZFlags = CUnit.ALU_EnSZFlags;
ALUnit.[FControl3..FControl0]     = CUnit.[ALU_FControl3..ALU_FControl0];
ALUnit.ZeroAdder = CUnit.ALU_ZeroAdder;
ALUnit.Subtract = CUnit.ALU_Subtract;	
ALUnit.UseCarry = CUnit.ALU_UseCarry;
ALUnit.Popf = CUnit.ALU_Popf;
ALUnit.InvertAdderCarry = CUnit.ALU_InvertAdderCarry;
ALUnit.EnableAccumWrite = CUnit.ALU_EnableAccumWrite;
ALUnit.[FlagMod1..FlagMod0] = CUnit.[ALU_FlagMod1..ALU_FlagMod0];

" ===========
" PAU LINKING
" ===========

" Control Lines
PAUnit.LoadHigh = CUnit.PAU_LoadHigh;
PAUnit.LoadLow = CUnit.PAU_LoadLow;
PAUnit.[MuxSel2..MuxSel0] = CUnit.[PAU_MuxSel2..PAU_MuxSel0];
PAUnit.Increment = CUnit.PAU_Increment;

" Linking Outputs
[ProgramAB12..ProgramAB0]   = PAUnit.[ProgAddr12..ProgAddr0];


" Linking Inputs
PAUnit.[Offset7..Offset0]       =  (!CUnit.PAUOffsetSel & DataDB)
                                  #(CUnit.PAUOffsetSel & CUnit.[Data7..Data0]);
PAUnit.[Direct12..Direct0]
    = CUnit.[IR12..IR0];
PAUnit.Reset = Reset;
PAUnit.Clock = Clock;



" ===========
" DAU LINKING
" ===========
DAUnit.[Accum7..Accum0]           = ALUnit.[Accum7..Accum0];
DAUnit.[Offset7..Offset0]         = CUnit.[Data7..Data0];
DAUnit.Reset                      = Reset;
DAUnit.Clock                      = Clock;


" Control Lines

DAUnit.[AccumMuxSel1..AccumMuxSel0]
= CUnit.[DAU_AddressMuxSel1..DAU_AddressMuxSel0];
DAUnit.Decrement = CUnit.DAU_Decrement;
DAUnit.CarryIn = CUnit.DAU_CarryIn;
DAUnit.WriteBackSel = CUnit.DAU_WriteBackSel;
DAUnit.Post = CUnit.DAU_Post;
DAUnit.OffsetSel = CUnit.DAU_OffsetSel;
DAUnit.Load = CUnit.DAU_Load;

" Linking Outputs
[XReg7..XReg0]      = DAUnit.[XReg7..XReg0];
[SReg7..SReg0]      = DAUnit.[SReg7..SReg0];
[DataAB7..DataAB0]  = DAUnit.[DataAddr7..DataAddr0];

CUnit.[Flags7..Flags0]          = ALUnit.[Flags7..Flags0];
CUnit.[IR15..IR0] = ProgramDB;

CUnit.Reset                     = Reset;
CUnit.Clock                     = Clock;

DataAB    = DAUnit.[DataAddr7..DataAddr0];
ProgramAB = PAUnit.[ProgAddr12..ProgAddr0];
" most signals are always enabled
ProgramAB.OE         =  ^h1FFF;
DataAB.OE            =  ^hFF;
RD.OE                =  1;
WR.OE                =  1;
[Accum7..Accum0].OE  =  ^hFF;
[Flags7..Flags0].OE  =  ^hFF;
[XReg7..XReg0].OE    =  ^hFF;
[SReg7..SReg0].OE    =  ^hFF;

RD        = CUnit.RD;

" Connect the status outputs
[Accum7..Accum0] = ALUnit.[Accum7..Accum0];
[Flags7..Flags0] = ALUnit.[Flags7..Flags0];
[XReg7..XReg0]   = DAUnit.[XReg7..XReg0];
[SReg7..SReg0]   = DAUnit.[SReg7..SReg0];
END  CUnit